#lang racket
( define ( display-point p )
( display "(")
( display ( point-x p ) )
( display ", ")
( display ( point-y p ) )
( display ")") )
( define ( display-vect v )
( display "[")
( display-point ( vect-begin v ) )
( display ", ")
( display-point ( vect-end v ) )
( display "]\n") )

(define (make-point x y)
  (cons x y))
(define (point-x p)
  (car p))
(define (point-y p)
  (cdr p))
(define (point? p)
  (and (pair? p) (number? (point-x p)) (number? (point-y p))))

(define a (make-point 1 1))
(point? a)
(point-x a)
(point-y a)
a

(define (make-vect p1 p2)
  (cons p1 p2))
(define (vect-begin v)
  (car v))
(define (vect-end v)
  (cdr v))
(define (vect? v)
  (and (pair? v) (point? (vect-begin v)) (point? (vect-end v))))
(define (vect-length v)
  (sqrt (+ (sqr (- (point-x (vect-begin)) (point-x (vect-end))))
           (sqr (- (point-y (vect-begin)) (point-y (vect-end)))))))
(define (vect-scale v k)
  (make-vect (vect-begin v) (make-point (+ (point-x (vect-begin v))(* k (- (point-x (vect-end v)) (point-x (vect-begin v)))))
                                        (+ (point-y (vect-begin v))(* k (- (point-y (vect-end v)) (point-y (vect-begin v))))))))
(define (vect-translate v p)
  (make-vect p (make-point (+ (point-x p) (- (point-x (vect-end v)) (point-x (vect-begin v))))
                           (+ (point-y p) (- (point-y (vect-end v)) (point-y (vect-begin v)))))))

(define b (make-point 2 4))
(define v (make-vect a b))
(vect-begin v)
(vect-end v)
(vect? v)
(display-point a)
(display "\n")
(display-point b)
(display "\n")
(display-vect v)
(display-vect (vect-scale v 10))
(display-vect (vect-translate v (make-point 0 0)))

(define (make-rat n d)
  (let ([c (gcd n d)])
  (cons (/ n c) (cons null (/ d c)))))
(define (rat-num u)
  (car u))
(define (rat-den u)
  (cdr (cdr u)))
(define (rat? u)
  (and (pair? u) (not (= (rat-den u) 0)) (= (gcd (rat-num u) (rat-den u)) 1)))
(define t (make-rat 5 10))
t
(pair? t)
(rat-num t)
(rat-den t)
(rat? t)
(define p (make-vect (make-point 1 2) (make-point 2 3)))
p
(define o (make-point 1 2))
o

    
  

