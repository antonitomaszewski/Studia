#lang racket

(define (perms lista)
  (if (null? lista)
      (list lista)
      (mult-perm-insert (car lista)
                        (perms (cdr lista)))))
(define (mult-perm-insert elem Listy)
  (define (iter Listy wynik)
    (if (null? Listy)
        wynik
        (iter (cdr Listy) (append (one-perm-insert elem (car Listy)) wynik))))
  (iter Listy null))
(define (one-perm-insert elem Lista)
  (define ile (- (length Lista) 0))
  (define (insert-on-i Lista i)
    (if (= i 0)
        (cons elem Lista)
        (cons (car Lista) (insert-on-i (cdr Lista) (- i 1)))))
  (define (iter i)
    (if (= i ile)
        (list (insert-on-i Lista i))
        (cons (insert-on-i Lista i) (iter (+ i 1)))))
  (iter 0))

(one-perm-insert 1 '(2 3))
(one-perm-insert 1 '())
(one-perm-insert 1 '(2))
(mult-perm-insert 1 '((0) (1) (2) (3)))
(perms '())
(perms '(1))
(perms '(1 2))
(perms '(1 2 3))
(perms '(1 2 3 4))
(perms '(1 2 3 4 5))