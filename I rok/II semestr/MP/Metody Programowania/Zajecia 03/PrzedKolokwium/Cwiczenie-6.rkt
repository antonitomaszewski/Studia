#lang racket

(define (permi X)
  (if (null? X)
      '(())
      (let ((reszta (permi (cdr X))))
        (wstawianie-do-reszty (car X) reszta))))

(define (wstaw-plis elem Xs)
  (define (wstaw-licznik elem Xs i)
    (define (iter Lista k)
      (if (= k i)
          (cons elem Lista)
          (cons (car Lista) (iter (cdr Lista) (+ k 1)))))
    (iter Xs 0))
  (define (wstaw-wiele-ziom elem Xs dlugosc)
    (define (iter k)
      (if (= k dlugosc)
          (list (wstaw-licznik elem Xs k))
          (cons (wstaw-licznik elem Xs k)
                (iter (+ k 1)))))
    (iter 0))
  (wstaw-wiele-ziom elem Xs (length Xs)))
(wstaw-plis 0 '(1 2 3 4 5))

(define (wstawianie-do-reszty elem Reszta)
  (define dlugosc (length Reszta))
  (define (unwrap lista reszta)
    (if (null? lista)
        reszta
        (cons (car lista (unwrap (cdr lista))))))
  (define (iteracja-po-zpermutowanych ktory)
    (define (iter Lista i)
      (if (= i ktory)
          (wstaw-plis elem Lista)
          (unwrap (wstaw-plis elem (car Lista))(iter (cdr Lista) (+ i 1)))))
    (iter Reszta 0))
  (iteracja-po-zpermutowanych dlugosc))


(define (permuts X)
  (if (null? X)
      (list X)
      (let ((dalej (permi (cdr X))))
        (wstawianie (car X) dalej))))

(define (wstawianie elem listy)
  ;;(define ile (- (length listy) 1))
  (define (iteracje X)
    (if (null? X)
        X
        (append (wstaw-plis elem (car X))
                (iteracje (cdr X)))))
  (iteracje listy))
(define (permutats lista)
  (if (null? (cdr lista))
      (cons lista null)
      (wstawianie (car lista) (permutats (cdr lista)))))
(define (permutats1 lista)
  (if (null? lista)
      (list lista)
      (wstawianie (car lista) (permutats1 (cdr lista)))))

(define (compose f g)
  (lambda (x) (f (g x))))
(define (identity x) x)
(define (repeated f n)
  (if (= n 0)
      identity (compose f (repeated (- n 1)))))
(define (perm X)
  (define (iter i) 1)
  1)

(permutats '(1 2 3))
(permutats1 '())
(permutats1 '(0))
(permutats1 '(1 2))
