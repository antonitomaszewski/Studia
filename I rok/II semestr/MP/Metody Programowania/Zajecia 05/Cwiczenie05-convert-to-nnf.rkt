#lang racket
(define (var? t)
  (symbol? t))   ;;symbol to 'zmienna

(define (neg? t)
  (and (list? t)
       (= 2 (length t))
       (eq? 'neg (car t))))

(define (conj? t)
  (and (list? t)
       (= 3 (length t))
       (eq? 'conj (car t))))

(define (disj? t)
  (and (list? t)
       (= 3 (length t))
       (eq? 'disj (car t))))

(define (prop? f)
  (or (var? f)
      (and (neg? f)
           (prop? (neg-subf f)))
      (and (conj? f)
           (prop? (conj-left f))
           (prop? (conj-right f)))
      (and (disj? f)
           (prop? (disj-left f))
           (prop? (disj-right f)))))

(define (var x) x)
(define (neg x)
  (list 'neg (var x)))
(define (conj x y)
  (list 'conj (var x) (var y)))
(define (disj x y)
  (list 'disj x y))

(define (neg-subf f)
  (second f))
(define (disj-left f)
  (second f))
(define (disj-right f)
  (third f))
(define (conj-left f)
  (second f))
(define (conj-right f)
  (third f))

(define (nnf?01 f)
  (or (var? f)
      (and (neg? f)
           (var? (neg-subf f)))
      (and (conj? f)
           (nnf?01 (conj-left f))
           (nnf?01 (conj-right f)))
      (and (disj? f)
           (nnf?01 (disj-left f))
           (nnf?01 (disj-right f)))))


(define (podwojna-negacja f)
  (cond
    ;;((nnf?01 f) f)
    ((var? f) (neg f))
    ((neg? f) (convert-to-nnf (neg-subf f)))
    ((disj? f) (conj (podwojna-negacja (convert-to-nnf (disj-left f))) (podwojna-negacja (convert-to-nnf (disj-right f)))))
    ((conj? f) (disj (podwojna-negacja (convert-to-nnf (conj-left f))) (podwojna-negacja (convert-to-nnf (conj-right f)))))))   
    
(define (convert-to-nnf f)
  (cond ((disj? f)
         (disj (convert-to-nnf (disj-left f))
            (convert-to-nnf (disj-right f))))
      ((conj? f)
       (conj (convert-to-nnf (conj-left f))
            (convert-to-nnf (conj-right f))))
      ((var? f) f)
      ((neg? f) (podwojna-negacja (neg-subf f)))))

(define form (neg (conj (conj 'x 'y) (conj 'a 'b))))
(define form-nnf (convert-to-nnf form))
(convert-to-nnf (neg-subf form))
(convert-to-nnf form)
(define form1 (neg (neg (neg 'x))))
(convert-to-nnf form1)
(define form2 (neg (conj 'x 'x)))
(convert-to-nnf form2)
(define form3 (neg (disj 'x 'y)))
(convert-to-nnf form3)
(define form4 (disj (neg 'x) (neg (conj 'b 'a))))
(convert-to-nnf form4)


