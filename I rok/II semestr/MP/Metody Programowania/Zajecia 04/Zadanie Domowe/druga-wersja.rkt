#lang racket

(define leaf 'leaf)
(define (leaf? x) (eq? leaf x))
(define (node-elem x) (second x))
(define (elem-priority x) (first x))
(define (node-left x) (fourth x))
(define (node-right x) (fifth x))
(define (rank x) (if (leaf? x) 0 (third x)))
(define (inc x) (+ x 1))

(define (laczenie-dwoch T1 T2)
  (cond ((leaf? T1) T2)
        ((leaf? T2) T1)
        (else (if (< (elem-priority (node-elem T1))
                     (elem-priority (node-elem T2)))
                  (let ((nowe (laczenie-dwoch (node-right T1) T2)))
                    (if (< (rank (node-left T1)) (rank nowe))
                        (list 'heap (node-elem T1) (inc (rank (node-left T1)))
                              nowe (node-left T1))
                        (list 'heap (node-elem T1) (inc (rank nowe))
                              (node-left T1) nowe)))
                  (let ((nowe (laczenie-dwoch (node-right T2) T1)))
                    (if (< (rank (node-left T2)) (rank nowe))
                        (list 'heap (node-elem T2) (inc (rank (node-left T1)))
                              nowe (node-left T2))
                        (list 'heap (node-elem T2) (inc (rank nowe))
                              (node-left T2) nowe)))))))
(define A (list 'heap (list 0 0) 2
                (list 'heap (list 1 1) 1 leaf leaf)
                (list 'heap (list 2 2) 1 leaf leaf)))
(define B (list 'heap (list 0 0) 2
                (list 'heap (list 1 1) 1 leaf leaf)
                (list 'heap (list 2 2) 1 leaf leaf)))
(define A1 (laczenie-dwoch A B))
(define A2 (laczenie-dwoch A1 A1))