#lang racket

(define (cont-frac-rec znak num den k)
  (define (iter i)
    (if (= i k)
        (/ (num i) (den i))
        (/ (num i) (znak (den i) (iter (+ i 1))))))
  (iter 1))
(define (cont-frac-iter znak num den k)
  (define (iter val k)
    (if (= k 0)
        val
        (iter (/ (num k) (znak (den k) val)) (- k 1))))
  (iter 0 k))
(display "4/pi ==")
(cont-frac-rec + (lambda (x) (sqr (- (* 2 x) 1.0)))
               (lambda (x) 2) 100)
(cont-frac-iter + (lambda (x) (sqr (- (* 2 x) 1.0)))
               (lambda (x) 2) 100)
(cont-frac-rec + (lambda (x) (sqr (- (* 2 x) 1.0)))
               (lambda (x) 2) 100)
(cont-frac-iter + (lambda (x) (sqr (- (* 2 x) 1.0)))
               (lambda (x) 2) 10000)

(display "pi/2==")
(/ pi 2)
(cont-frac-rec + (lambda (x) (if (= x 1) 2 (* (- (* 2 (- x 1)) 1)
                                              (+ (* 2 (- x 1)) 1))))
               (lambda (x) (if (= x 1) 3.0 4)) 100)
