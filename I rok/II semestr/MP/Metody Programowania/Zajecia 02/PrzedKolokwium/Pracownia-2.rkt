#lang racket
(define (abs x) (if (< x 0) (* -1 x) x))
(define (dist x y) (abs (- x y)))
(define (compose f g) (lambda (x) (f (g x))))
(define (identity x) x)
(define (repeated f n) (if (= n 0) identity (compose f (repeated f (- n 1)))))
(define (good-enough? x y) (< (dist x y) 0.0001))
(define (fixed-point f x0) (let ((x1 (f x0))) (if (good-enough? x0 x1) x0 (fixed-point f x1))))
(define (average a b) (/ (+ a b) 2))
(define (average-damp f) (lambda (x) (average (f x) x)))
(define (log2 n)
  (define (iter a k) (if (> a n) k (iter (* a 2) (+ k 1))))
  (iter 2 0))
(define (nth-root x n)
  (define damps (log2 n))
  (define f ((repeated average-damp damps) (lambda (y) (/ x (expt y (- n 1))))))
  (fixed-point f 1.0))